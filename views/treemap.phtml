<div class="ecw-mask">
    <div class="ecw-loading-screen ecw-mask-asset">
        Loading...
        <div class="ecw-loading-spinner"></div>
    </div>
    <div class="ecw-dialog ecw-mask-asset">
        <div class="ecw-dialog-close">CLOSE</div>
        <span id="ecw-dialog-text">Dialog Text</span>
        <div><button class="ecw-button-dismiss" id="ecw-button-dismiss">Dismiss</button></div>
    </div>
</div>

<div class="ecw-container">
    <div class="ecw-controls">
        <label for="ecw-query-input" class="ecw-control-item">Enter a username or topic:</label>
        <input type="text" name="ecw-query-input" id="ecw-query-input" class="ecw-control-item" value="">
        <button id="ecw-btn-classify" class="ecw-control-item">Classify</button>
    </div>
    <?php if (!$this->app->session()->get('solved_captcha')): ?>
        <div class="g-recaptcha" data-sitekey="<?php echo getenv('GOOGLE_RECAPTCHA_SITEKEY'); ?>"></div>
    <?php endif; ?>
    <div id="ecw-chart-controls">
        <div class="ztm-path-buttons chart-control">
            <button type="button" id="path-button-back" class="btn-path ztm-path-buttons-back">
                < Back
            </button>
            <button type="button" id="path-button-forward" class="btn-path ztm-path-buttons-forward">
                Forward ></span>
            </button>
        </div>
    </div>
    <div id="ecw-canvas"></div>
    <div id="ecw-status"></div>
    <div id="ecw-tweets">
        <div class="tweet" v-for="tweet in tweets">
            <img class="profile-pic" :src="tweet.user.profile_image_url">
            <div class="tweet-body">
                <span class="name">{{ tweet.user.name }}</span>
                <span class="screen-name">@{{ tweet.user.screen_name }}</span>
                <span class="created-at">{{ formatDate(tweet.created_at) }}</span>
                <span class="text">{{ tweet.text }}</span>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
  var solvedCaptcha = <?php echo ($this->app->session()->get('solved_captcha')) ? 'true' : 'false'; ?>;

  $(document).ready(function() {
    $(".ecw-dialog-close, #ecw-button-dismiss").click(function(e) {
      hideDialog();
    });
    $("#ecw-btn-classify").click(function(e) {
      var query = $("#ecw-query-input").val();
      if (query == '') {
        alert('You must enter something in the query field.');
        return false;
      }
      var baseUrl = '<?php echo getApiUrl(); ?>';
      var method = 'get';
      var match;
      var payload;
      var endPoint;
      var formData;
      if (null !== (match = query.match(/\@([^.]+)/))) {
        payload = match[1];
        endPoint = 'user';
        formData = {
          screen_name: payload
        };
      } else if (null !== (match = query.match(/https?/))) {
        payload = query;
        endPoint = 'url';
        formData = {
          url: payload
        };
      } else if (null !== (match = query.match(/\s/g))) {
        payload = query;
        endPoint = (match.length > 2)
          ? 'text'
          : 'search';
        if (endPoint == 'text') {
          formData = {
            text: payload
          };
          method = 'post';
        } else {
          formData = {
            q: payload
          };
        }
      } else {
        payload = query;
        endPoint = 'search';
        formData = {
          q: payload
        };
      }
      var classify = function() {
        showLoadingScreen(true);
        $.ajax({
          method: method,
          data: formData,
          url: baseUrl + '/' + endPoint
        })
          .done(function(d) {
            showLoadingScreen(false);
            buildTreeMap(d, '#ecw-canvas');
          })
          .fail(function(e) {
            console.log(e);
          });
      }
      if (!solvedCaptcha) {
        var gResponse = $("[name='g-recaptcha-response']").val();
        if (gResponse.length == 0) {
          showDialog('Sorry, but you must complete the captcha first.');
        }
        $.ajax({
          url: baseUrl + '/' + 'verify',
          data: {
            'g-captcha-response': gResponse
          }
        })
          .done(function(d) {
            solvedCaptcha = true;
            $('.g-recaptcha').hide();
            classify();
          })
          .fail(function(e) {
            showDialog(e.responseJSON.error);
          });
      } else {
        classify();
      }
    });
  });

  // tweets box
  var tweetsBox = new Vue({
    el: '#ecw-tweets',
    data: {
      tweets: null
    },
    methods: {
      formatDate: function(dateStr) {
        var newDate = new Date(dateStr);
        return newDate.toLocaleDateString();
      }
    }
  });

  var showLoadingScreen = function(n) {
    $(".ecw-mask-asset").hide();
    $(".ecw-loading-screen").show();
    if (n === true) {
      $(".ecw-mask").show();
    } else {
      $(".ecw-mask").hide();
    }
  };

  var showDialog = function(t) {
    $(".ecw-mask-asset").hide();
    $(".ecw-mask, .ecw-dialog").show();
    $("#ecw-dialog-text").html(t);
  };

  var hideDialog = function() {
    $(".ecw-mask").hide();
  };

  // treemap
  var buildTreeMap = function(data, selector) {

    // remove previous viz
    $(".anchorZTM, .tool-tip").remove();
    tweetsBox.tweets = [];
    $(".ztm-path-buttons").hide();

    var treemap = EC.ZoomTreeMap(selector, data);

    // set the stage width
    var stageWidth = $(selector).width();

    treemap.setWidth(stageWidth);
    treemap.build();

    EC.Events.subscribe('/ZoomTreeMap/zoom', function(d) {
      tweetsBox.tweets = [];
      tweetsBox.tweets = d.tweets;
    });
  };
</script>